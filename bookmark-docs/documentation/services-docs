# Search
The search service is a combination of [HTML](#search-html), [search frontend javascript](#search-js) and [search service](#search-srv). These files can be found under [bookmark-ionic/www/pages/bookSearch](https://github.com/Jharilela/Bookmark/tree/master/bookmark-ionic/www/pages/bookSearch).

## Search HTML
The 

## Search Js


## Search Srv


# Location
The location service is a combination of [HTML](#location-html), [location frontend javascript](#location-js) and [location service](#location-srv). These files can be found under [bookmark-ionic/www/pages/location](https://github.com/Jharilela/Bookmark/tree/master/bookmark-ionic/www/pages/location). 

![location_1](https://github.com/Jharilela/Bookmark/blob/master/bookmark-docs/pictures/location_1.png)
![location_2](https://github.com/Jharilela/Bookmark/blob/master/bookmark-docs/pictures/location_2.png)
![location_3](https://github.com/Jharilela/Bookmark/blob/master/bookmark-docs/pictures/location_3.png)

## Location HTML
This HTML ionic file is a simple implementation of the map page displayed above. There is one header bar containing the input search field. A subheader bar is used for location suggestion of a place which is being searched and a main body containing the ng-map along with the shapes if there are any. There are 2 buttons in the map, a close button and a save button

## Location Js
The location javascript is called upon when the ionic router loads the location controller. When this controller is loaded, the `$stateparams` loads 2 parameters: location and editable. The editable variable defines whether the location on the ng-map can be changed and saved. 

If there is 1 location passed, a marker will be added to the map. The center of the map and enter the current location in the search text field. 

If there are 2 or more location passed, 2 circles will be created encompassing the locations and the center point between the circles will be the center of the map. Any map in address entered to the search text field will add a marker to the adress location

If there are no locations passed, the map will be centered in the center of Hong Kong by default at lat : 22.2783151 and lng : 114.17469499999993. If the address in the search text field changes, the controller will load suggestion results from the location service and load it to the subheader bar for sugestions.

When the close button is called, the markers are reset and the ionic router returns to the previous page. When the finish button is closed, the rootscope is broadcasted with the adress object

## Location Srv
The location service performs functions that involve location objects. There are 5 main functions provided by the location service : 

1. [searchAddress](#searchaddress)
2. [getDetails](#getdetails)
3. [stringToDistance](#stringtodistance)
4. [inProximity](#inproximity)
5. [calculateDistance](#calculatedistance)

## searchAddress
This function accepts a string value as an input parameter. this function gets the places predictions from the autocomplete service by google places. If suggestions of a place has been loaded successfully, the searchAddress function returns an asynchronous object with a suggestion of places.

## getDetails
This function gets the detail of a place from the detail service. The function accepts a placeId parameter as input and returns the details of the place

## stringToDistance
The function receives a string paramaeter as input with the suffix of either "km" or "m". If the string parameter contains "km", the number is taken as a substring and multiplied by 1000 to be converted to metre format. If the string parameter contains "m", the number is taken as substring.

## inProximity
This function determines if the anotherUser is within a proximity of the currentUser. It accepts 3 parameters `currentUser`, `otherUser` and `radius`. If the currentUser or otherUser does not have a location paramater stored in their data, the function returns false. If both users have a location, then the following [calculateDistance](#calculatedistance) is called to determine the distance. If the distance is within the radius, the distance is returned, else the function returns false.

## calculateDistance
This function determines the distance between 2 markers on the map. it accepts 2 object parameter containing latitude and longitude and uses the google maps sherical object to compute the distance between the positions

	LocationService.calculateDistance({
		lat : 45.504324,
		lng : -73.612862
	}, {
		lat : 45.508204,
		lng : -73.664323
	})

	result = 4.05 (km)

# CountryList and Currency
The countryList factory provides services that return country data from the [JSON file](https://github.com/Jharilela/Bookmark/blob/master/bookmark-ionic/www/directives/countryList.json). The file contains a list of country_name, country_code, and country_currency. The format of the country list is as detailed below: 

    {
        "name" : country_name,
        "code" : country_code,
        "currency" : country_currency
    }

There are 2 functions of the factory  
1. get the whole JSON object
2. get the currency for a particular country

The syntax for defining functions within the factory is detailed below

    angular.module('bookmark.controllers')
    .factory('countryList', function($http, $q) {
	return{
            function_name_1 : function(){
                ........
            },
            function_name_2 : function(){
                ........
            }
        } 
    })

In this case, we will be declaring only 2 functions namely `get()` that returns a JSON object containing the country data and `getCurrency()` which returns the currency code based on the country name specified in the country data JSON object.

## get
The get method is called when a new user registers for an account. It is used their country of residence. It is called when the user wants to change this data from the profile page. 

No parameter is required when calling the get function. It returns a JSON object with all the contents of the JSON file. The data is obtained using an `$http.get(url_of_file)` method; because of which the data is obtained asynchronously

    get : function(){
        return $http.get('directives/countryList.json');
    }


## getCurrency
The getCurrency method can be called anywhere in the program by passing a `country_name` parameter that matches the list of country names in the JSON file. When a user creates an account and chooses their location, the country_name is obtained by matching details of the location with that of the country data and the corresponding country details is stored in Firebase. When the user wants to buy/sell/borrow/rent books, the price unit will be converted to the currency of their location.

The function obtains the country data through the `$http.get(url_of_file)` method which returns a promise. The country data can be obtained from the parameter passed onto the `then` property. Each object name of each country in the list is compared to the country (name) parameter passed to the function. If a match occurred, the currency is directly returned. If no match occurred, an error is passed to the calling function. Since $http.get returns a promise, the getCurrency must return data in the form a promise because the tasks are carried out asynchronously.
 
	getCurrency : function(country){
		var deferred = $q.defer();
		console.log('getting currency of ',country);

		$http.get('directives/countryList.json')
		.then(function(countryList){				
			angular.forEach(countryList.data, function(countryData){
				if(countryData.name == country || countryData.code==country){
					deferred.resolve(countryData.currency);
				}
			})
		})
		.catch(function(err){
			console.error("error fetching currency of location "+country+" : ", err);
			deferred.reject("error fetching currency of location");
		})
		return deferred.promise;
	}