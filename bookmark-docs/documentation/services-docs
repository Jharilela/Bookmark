# Search
The search service is a combination of [HTML](#search-html), [search frontend javascript](#search-js) and [search service](#search-srv). These files can be found under [bookmark-ionic/www/pages/bookSearch](https://github.com/Jharilela/Bookmark/tree/master/bookmark-ionic/www/pages/bookSearch).

![search_1](https://github.com/Jharilela/Bookmark/blob/master/bookmark-docs/pictures/search_1.png)
![search_2](https://github.com/Jharilela/Bookmark/blob/master/bookmark-docs/pictures/search_2.png)
![search_3](https://github.com/Jharilela/Bookmark/blob/master/bookmark-docs/pictures/search_3.png)

## Search HTML
The html implemetation of the search page is very simple. It contains one text bar at the top of the page. A body that either contains search suggestions or search results. It can also contain a `didYouMean` keyword to suggest the user with a search keyword in the case that he mispelled a book while searching for a book. The `no-internet-message` directive is also loaded if the app goes offline.

## Search Js
A javascript file that is loaded when the router enters the search controller. When the controller is loaded for the first time and the user is logged in, the books nearby are fetched and displayed to the user. As the user types a keyword and searches for it, a search suggestion is loaded and the book title is searched from the service. A progress bar object from search service is responsible to display how much of the books have been fetched. The books are then grouped into columns of 3 using the chunk directive. As the books have been loaded and displayed, the search is logged onto the database

## Search Srv
This service is responsible for searching for a book in googleBooks, amazonBooks, goodReadBooks and compiles the results to an array and sorts it using an algorithm. The search service also returns a progressBar that is dynamically updated when books are received and during compilation. 

[book object format](#book-object-format)

[searchGoogleBooks](#searchgooglebooks)

[searchAmazonBooks](#searchamazonbooks)

[searchGoodReadsBooks](#searchgoodreadsbooks)

[searchBookList](#searchbooklist)

[progressbar](#progressbar)

### book object format
	book : {
		type : where the book was loaded from ("google", "amazon" and/or "goodReads"),
		book : book_obj,
		primeTitle
		subTitle
		title : primeTitle + subTitle,
		description 
		imageLink 
		authors : ["author_1", "author_2", ...]
		ISBN
		pageCount 
		publishedYear
		categories
		printType
		publisher 
		language 
		averageRating 
		ratingsCount 
		countryAccessed 
		ebookIsAvailable 
		pdfIsAvailable 
	}

### searchGoogleBooks
This function searches for a book title in google books library through the google API. The book title being searched is first formatted and the spaces are converted to "+" based on the API rules. The app is loaded through the `$http.get()` function calling the url at `https://www.googleapis.com/books/v1/volumes` having the parameters of `q` referring to the search querry, `maxResults` referring to the maximum number of this results, in this case it is 10, `apiKey` containing the google api key stored in the constants page. On completition, it formats and returns the resulting array in the format mentioned in the [book object format section](#book-object-format)

	googleBooks = [{
		type : "google",
		book : res.data.items[1],
		googleId : book.id,
	}]

	other parameters are found in book.volumeInfo

If there was an error retreiving the books from google books api, the function returns an empty array and changes the color of the progress bar to green. During this whole process of retreiving the book, the progressBar is constantly updated through `vm.progressbar`.

### searchAmazonBooks
This function searches for a book title in amazon webservice api. It receives a parameter of searchItem and loads the book through an angular `$http.get()` function. The search text is first formatted and the spaces are replaced with "%20" to allow the book title being searched based on amazon api rules. The `$http.get()` function also requires a timestamp of the current time but must be formatted to replace the ":" symbol with the "%3A" symbol. Another requirement of amazon api is to encrypt the request parameters with the awsSecretKey and add the signature to the http request url. The resulting bookList is in XML format and is converted to JSON format using yahoo api.

When the bookList is received, it is formatted using the [book object format](#book-object-format). 

	amazonBooks = [{
		type : "amazon"
		book : book_obj
		ASIN : amazon_book_id
	}]

The time taken for the function is taken. The progress of the search is dynamically updated to the vm.progressbar. If an error is detected, the error is displayed, a blank array is returned and the progressbar color is changed to orange to indicate to the user that somehting may have gone wrong. 

### searchGoodReadsBooks
This function searches for a book keyword in the goodReads library throught the api. The searchItem is a parameter passed onto the function but must first be formatted before used in the url, the spaces from the search keyword is replaced with "+". The url called in to obtain the bookList just needs 2 parameter, `q` which is the searchItem, `key` which is apiKey of the goodReads. Since the result of the goodReadsApi is in XML format, it has to be converted to a JSON object and is done so through the yahoo api.

When the bookList is received, it is formatted using the [book object format](#book-object-format). 

	goodReadBooks = [{
		type : "goodReads"
		book : book_obj
		goodReadsId : goodRead_book_id
	}]

The time taken to retrieve the ook is calculated to display to the developer how long it look to load the books. The function returns an array of the books loaded from goodReads and the value of the progressBar is constantly updated. If there was an error in retreiving the books, the color of the progressBar is changed to purple and an empty array is returned.

### searchBookList
This function is loaded when the user searches for a book title in the search tab. This function receives 2 parameters being `searchItem` which is the search text and `selectedService` which can either be 'amazon', 'goodReads' and 'google' which calles upon the specific search services; however this function is discontinued and any parameter can be passed to the function. 

The function calls upon [searchGoogleBooks](#searchgooglebooks), [searchAmazonBooks](#searchamazonbooks) and [searchGoodReadsBooks](#searchgoodreadsbooks) for the books. Once all the books have been loaded and returned to this function. It also logs the total time taken, google, amazon and goodReads books. All the resulting book arrays are compiled and added together through the addToBookList function. The resulting book list array is sorted based on the following sequence "decsending number of occurence of the book in the various sources", "decsending ratings", "descending books with same words", "descending word sequence". 

Once everything is completed, the bookList array is returned.

### progressbar
The progress bar is an instance of `ngProgressFactory` with a height of 2px. This progress bar can be acessed through `vm.progressbar`. 

To add value, we can use `vm.progressbar.add(number)`

To change the color, we can use `vm.progressbar.setColor("#RRGGBB")`

To obtain the status, `vm.progressbar.status()`

# Location
The location service is a combination of [HTML](#location-html), [location frontend javascript](#location-js) and [location service](#location-srv). These files can be found under [bookmark-ionic/www/pages/location](https://github.com/Jharilela/Bookmark/tree/master/bookmark-ionic/www/pages/location). 

![location_1](https://github.com/Jharilela/Bookmark/blob/master/bookmark-docs/pictures/location_1.png)
![location_2](https://github.com/Jharilela/Bookmark/blob/master/bookmark-docs/pictures/location_2.png)
![location_3](https://github.com/Jharilela/Bookmark/blob/master/bookmark-docs/pictures/location_3.png)

## Location HTML
This HTML ionic file is a simple implementation of the map page displayed above. There is one header bar containing the input search field. A subheader bar is used for location suggestion of a place which is being searched and a main body containing the ng-map along with the shapes if there are any. There are 2 buttons in the map, a close button and a save button

## Location Js
The location javascript is called upon when the ionic router loads the location controller. When this controller is loaded, the `$stateparams` loads 2 parameters: location and editable. The editable variable defines whether the location on the ng-map can be changed and saved. 

If there is 1 location passed, a marker will be added to the map. The center of the map and enter the current location in the search text field. 

If there are 2 or more location passed, 2 circles will be created encompassing the locations and the center point between the circles will be the center of the map. Any map in address entered to the search text field will add a marker to the adress location

If there are no locations passed, the map will be centered in the center of Hong Kong by default at lat : 22.2783151 and lng : 114.17469499999993. If the address in the search text field changes, the controller will load suggestion results from the location service and load it to the subheader bar for sugestions.

When the close button is called, the markers are reset and the ionic router returns to the previous page. When the finish button is closed, the rootscope is broadcasted with the adress object

## Location Srv
The location service performs functions that involve location objects. There are 5 main functions provided by the location service : 

1. [searchAddress](#searchaddress)
2. [getDetails](#getdetails)
3. [stringToDistance](#stringtodistance)
4. [inProximity](#inproximity)
5. [calculateDistance](#calculatedistance)

## searchAddress
This function accepts a string value as an input parameter. this function gets the places predictions from the autocomplete service by google places. If suggestions of a place has been loaded successfully, the searchAddress function returns an asynchronous object with a suggestion of places.

## getDetails
This function gets the detail of a place from the detail service. The function accepts a placeId parameter as input and returns the details of the place

## stringToDistance
The function receives a string paramaeter as input with the suffix of either "km" or "m". If the string parameter contains "km", the number is taken as a substring and multiplied by 1000 to be converted to metre format. If the string parameter contains "m", the number is taken as substring.

## inProximity
This function determines if the anotherUser is within a proximity of the currentUser. It accepts 3 parameters `currentUser`, `otherUser` and `radius`. If the currentUser or otherUser does not have a location paramater stored in their data, the function returns false. If both users have a location, then the following [calculateDistance](#calculatedistance) is called to determine the distance. If the distance is within the radius, the distance is returned, else the function returns false.

## calculateDistance
This function determines the distance between 2 markers on the map. it accepts 2 object parameter containing latitude and longitude and uses the google maps sherical object to compute the distance between the positions

	LocationService.calculateDistance({
		lat : 45.504324,
		lng : -73.612862
	}, {
		lat : 45.508204,
		lng : -73.664323
	})

	result = 4.05 (km)

# CountryList and Currency
The countryList factory provides services that return country data from the [JSON file](https://github.com/Jharilela/Bookmark/blob/master/bookmark-ionic/www/directives/countryList.json). The file contains a list of country_name, country_code, and country_currency. The format of the country list is as detailed below: 

    {
        "name" : country_name,
        "code" : country_code,
        "currency" : country_currency
    }

There are 2 functions of the factory  
1. get the whole JSON object
2. get the currency for a particular country

The syntax for defining functions within the factory is detailed below

    angular.module('bookmark.controllers')
    .factory('countryList', function($http, $q) {
	return{
            function_name_1 : function(){
                ........
            },
            function_name_2 : function(){
                ........
            }
        } 
    })

In this case, we will be declaring only 2 functions namely `get()` that returns a JSON object containing the country data and `getCurrency()` which returns the currency code based on the country name specified in the country data JSON object.

## get
The get method is called when a new user registers for an account. It is used their country of residence. It is called when the user wants to change this data from the profile page. 

No parameter is required when calling the get function. It returns a JSON object with all the contents of the JSON file. The data is obtained using an `$http.get(url_of_file)` method; because of which the data is obtained asynchronously

    get : function(){
        return $http.get('directives/countryList.json');
    }


## getCurrency
The getCurrency method can be called anywhere in the program by passing a `country_name` parameter that matches the list of country names in the JSON file. When a user creates an account and chooses their location, the country_name is obtained by matching details of the location with that of the country data and the corresponding country details is stored in Firebase. When the user wants to buy/sell/borrow/rent books, the price unit will be converted to the currency of their location.

The function obtains the country data through the `$http.get(url_of_file)` method which returns a promise. The country data can be obtained from the parameter passed onto the `then` property. Each object name of each country in the list is compared to the country (name) parameter passed to the function. If a match occurred, the currency is directly returned. If no match occurred, an error is passed to the calling function. Since $http.get returns a promise, the getCurrency must return data in the form a promise because the tasks are carried out asynchronously.
 
	getCurrency : function(country){
		var deferred = $q.defer();
		console.log('getting currency of ',country);

		$http.get('directives/countryList.json')
		.then(function(countryList){				
			angular.forEach(countryList.data, function(countryData){
				if(countryData.name == country || countryData.code==country){
					deferred.resolve(countryData.currency);
				}
			})
		})
		.catch(function(err){
			console.error("error fetching currency of location "+country+" : ", err);
			deferred.reject("error fetching currency of location");
		})
		return deferred.promise;
	}