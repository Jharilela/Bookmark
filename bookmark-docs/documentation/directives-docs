Directives is a folder under the main www folder containing all the ionic components. The directives tab contains important javascript codes used throughout the main application and also HTML popups that can be summoned from within the application during run time. The javascript directives are independent of the main application whereas the HTML directives are dependent on the angular variables declared in the caller function. 

**Javascript**
* [Basic](#basic)
* [levenshtein](#levenshtein) 
* [objectPrototypes](#objectprototypes)

**HTML**
* [ownBookPop](#ownbookpop)
* [rentBook](#rentbook)
* [viewBookInfo](#viewbookinfo)
* [viewBorrowFrom](#viewborrowfrom)
* [viewBuyFrom](#viewbuyfrom)
* [viewMapPop](#viewmappop)  
* [viewProfilePicture](#viewprofilepicture)


***

# Basic  
basic.js defines some functions that are required for basic processing and formatting but are not available directly in the javascript or even angular library. It also enables customizability of the basic processes like object formatting, logarithms functions, sorting, etc.. Since these functions are not declared within an angular controller or service but on RAW javascript, it can be accessed throughout the program by simply calling the functions.

## log10
    function log10(value){
	    return Math.log(value)/ Math.LN10
    }
This function is to return a log value to the base 10 of any integer parameter passed to it. The default math.log is to the base of e which makes it a `ln` function. 

## logB
    function logB(value,base){
        return Math.log(value)/Math.log(base)
    }
The logB function accepts 2 parameters and returns the log value of the first parameter divided by the log value of the second parameter passed to it. Care is to be taken to pass only integer values to the function
## cleanObj
    function cleanObj(obj){
	    for (var propName in obj) { 
	        if (obj[propName] === null || obj[propName] === undefined) {
	          delete obj[propName];
	        }
	    }
	    return obj;
    }
The cleanObj function removes all empty, undefined or null value keys within the object. It then returns the same object passed to it without the empty properties, key values.

## addObj
    function addObj(to, obj){
	    for(var propName in obj){
	    	to[propName] = obj[propName]
	    }
	    return to;
    }
The addObj function receives a reference object to which the data wants to be copied to and another object containing the data that wants to be copied. Inside the function is a simple for loop that goes through the key value pairs of the `obj` variable and copies them to the key/value pairs of the `to` variable. There is no check function to see if the existing key already exists, so if the `to` variable already has the key, it would be overwritten

## isEmpty
    function isEmpty(obj){
	    if(obj == undefined || obj == null)
	    	return true;
	    else
	    	return false;
    }
isEmpty is a multi-purpose function that checks if an object, string, array, number or any other data type has a value and is defined. It returns a boolean value to the caller with `true` indicating that the object passed is empty 

## maxLength
    function maxLength(str1, str2){
	    return str1.length>str2.length?str1.length:str2.length;
    }
The maxlength function is a simple function that compares the length of 2 strings and return the maximum length between them in integer format.

## htmlToText
    function htmlToText(str){
            str = str.replace(/<style([\s\S]*?)<\/style>/gi, '').replace(/<script([\s\S]*?)<\/script>/gi, '').replace(/<\/div>/ig, '\n').replace(/<\/li>/ig, '\n').replace(/<li>/ig, '  *  ').replace(/<\/ul>/ig, '\n').replace(/<\/p>/ig, '\n').replace(/<br\s*[\/]?>/gi, "\n").replace(/<[^>]+>/ig, '');
	    return str;
    }
This function is adapted from [this link](http://stackoverflow.com/questions/15180173/convert-html-to-plain-text-in-js-without-browser-environment). It converts a string containing HTML tags like `<style>,<script>,<div>,<li>,<ul>,<p>,<br>` into readable human language without the tags. When receiving book details from amazon, goodreads and google, the book description often comes in HTML format that cannot be displayed to the user directly

## breakName
    function breakName(str){
	    var returnObj= {}
	    if(str.indexOf(" ")==-1){
	    	returnObj.firstName = str;
	    }
	    else{
	    	returnObj.firstName = str.substring(0, str.indexOf(" "))
	    	returnObj.lastName = str.substring(str.indexOf(" ")+1, str.length)
	    }
	    return returnObj
    }
This function takes the name of a person and breaks it into an object of 2 keys : firstName and lastName. This is dome by identifying the first space bar in the name and taking the substrings before and after the name.

## dynamicSortMultiple
    array.sort(dynamicSortMultiple("high_priority_key", "lower_prioirity_key", "-key_for_reverse_sort"))
This function sorts an array based on 1 or more keys. The implementation is taken directly from [this link](http://stackoverflow.com/questions/1129216/sort-array-of-objects-by-string-property-value-in-javascript). This function must be prefixed with the js sort function in order to be executed. We can pass multiple parameters into the function with names of the key properties that wants to be sorted in order of highest priority to lowest priority. The `-` indicates a reverse sort

# Levenshtein 
The Levenshtein algorithm compares 2 strings and calculates the number of operations that is required to convert one string to another. 

    eg: compare Harry potter and harry porter
          h,a,r,r,y, ,p,o,t,t,e,r
        0,1,2,3,4,5,6,7,8,9,10,11,12
    'h' 1,0,1,2,3,4,5,6,7,8,9,10,11
    'a' 2,1,0,1,2,3,4,5,6,7,8,9,10
    'r' 3,2,1,0,1,2,3,4,5,6,7,8,9
    'r' 4,3,2,1,0,1,2,3,4,5,6,7,8
    'y' 5,4,3,2,1,0,1,2,3,4,5,6,7
    ' ' 6,5,4,3,2,1,0,1,2,3,4,5,6
    'p' 7,6,5,4,3,2,1,0,1,2,3,4,5
    'o' 8,7,6,5,4,3,2,1,0,1,2,3,4
    'r' 9,8,7,6,5,4,3,2,1,1,2,3,3
    't' 10,9,8,7,6,5,4,3,2,1,1,2,3
    'e' 11,10,9,8,7,6,5,4,3,2,2,1,2
    'r' 12,11,10,9,8,7,6,5,4,3,3,2,1
In the above example, it takes 1 process to convert harry potter to harry porter. This algorithm is used to calculate the typing error a person making when searching for a particular book. 

The function receives 2 strings that are to be compared and a boolean variable which shows the steps during the comparison. An example of the function is given below

    Levenshtein("harry potter", "harry porter", true)
The function returns a percentage of the steps to convert the 2 strings over the number of characters in the longest string. This function is also modified to compensate Onomatopoeia error. If we are changing one vowel to another, the penalty is set to 0.5 instead of 1. This increases the similarity rating between the words. 

When comparing "harry" to "hatry", there is 1 character to be changed  
So the output is 1/5 * 100 = 80%
    
Whereas comparing "harry to "herry", there is 1 alphabet to be changed  
So the output is 0.5 * 100 = 90%

Through trial and error, 90% is set as the threshold to determine if the strings are similar

    if(levenshtein("harry potter", "harry porter", true)){
        //strings are similar
    }
    else{
        //strings are different
    }

# objectPrototypes
Object prototypes are functions added directly to a data type in order to carry out a specific task. We have many existing object prototypes like array.sort() but we can manually declare them using the `Object.defineProperty(data_type.prototype)' method. 

In this application we have defined 2 object prototypes: 
1. array.chunk
2. string.containsHTML

## array.chunk
This method divides a single dimensional array into a double dimensional array with n number of columns. The function receives an integer parameter that determines how many columns will exist in the resulting 2-dimensional array

     array.chunk(c)
chunk an array of size: 1 col x N rows into c cols x n rows

## string.containsHTML
This method checks if a string contains a regex expression of just alphabets ranging from "a,b,c,.......x,y,z". If the string contains other characters such as `<` , `>`, `/`. This property is used to determine if the string contains HTML characters before calling the HTMLToText function

    str.containsHTML()
check if the string contains HTML expressions, the value becomes true if found

# ownBookPop
This popup is launched after the user presses 'on my shelf' on the book details page. The ownBookPopup has 2 components: buttons and text field. If the user wants to add a book to their library, ownBookPop provides a method to declare if they are willing to rent or sell the book along with the price.

![ownBookPop.png](https://github.com/Jharilela/Bookmark/blob/master/bookmark-docs/pictures/ownBookPop.png)

It can be called using the following method

	$ionicPopup.show({
		templateUrl : "directives/ownBookPop.html",
		scope : $scope,
		buttons: [
		{ 	text: 'Cancel',
			onTap: function(e){
				return false;
			}
		},
		{
			text: '<b>Confirm</b>',
			onTap: function(e) {
				// receive user actions
			}
		}]
	})
	.then(function(param){
            if(param){
                //save book data to firebase
            }
    }
To call the HTML directive, we use the `$ionicPopup.show` method along with a cancel and confirm button. If the cancel button is pressed, a false boolean will be passed to the `then()` function. If the confirm button is pressed, an object containing the user's action (sell, rent) along with the prices is passed to the `then()` function. Since the cancel button cannot trigger a `catch()` method when tapped, we search for a false boolean in the then function to detect the confirm button

# rentBook
This ionic modal becomes visible to the user when they hold down a book in the bookList for some time and press the rent button. The purpose of this feature is to let user rent out books that are already on their shelf at home and also keep track of the return date and the rent fee whether it is monetary or not. The modal also enables selling the book and enabling the user to keep track of who bought it and for how much


To see the actions that can be taken on a book, press and hold it for some time and press the rent button

![rentBook.png](https://github.com/Jharilela/Bookmark/blob/master/bookmark-docs/pictures/rentBook_1.jpg)

To rent the book, enter the name of the person with optional details like the from_date, to_date and rent price

![rentBook.png](https://github.com/Jharilela/Bookmark/blob/master/bookmark-docs/pictures/rentBook_2.png)

To sell the book, enter the name of the buyer and optionally the sell_price

![rentBook.png](https://github.com/Jharilela/Bookmark/blob/master/bookmark-docs/pictures/rentBook_3.png)

Once a book has been pressed, the opacity of the book becomes half to indicate that the book is no longer on the shelf but with someone else.

![rentBook.png](https://github.com/Jharilela/Bookmark/blob/master/bookmark-docs/pictures/rentBook_4.png)

The modal can be called using the code below :

	$ionicModal.fromTemplateUrl('directives/rentBook.html', {
		scope: $scope,
		animation: 'slide-in-up'
	}).then(function(modal) {
		$scope.modal = modal;
		$scope.modal.show();
	});

There are many functions being called within the viewBookInfo modal; these functions are written inside the caller controller which implements the `$ionicModal` method. There are 3 main functions being called from the scope : 
* `$scope.closeModal()` - closes the modal
* `$scope.setFormType(value)` - changes the user action status to 'sell' or 'rent'
* `$scope.submitModal()` - implements the change of book status

# viewBookInfo
The viewBookInfo modal is designed to give the user overview of the status of the book: whether sold, on rent, willing to be sold or willing to be rented. The modal is an overlay on the screen with a translucent black background. To access this modal, the user needs to press and hold the book for some time until the action menu appears and then press the information icon 

![viewBookInfo_1](https://github.com/Jharilela/Bookmark/blob/master/bookmark-docs/pictures/viewBookInfo_1.jpg)

The viewBookInfo modal appears differently based on whether the book is on the user's shelf or given to someone else

If the book is still on the user's shelf, it appears as follows

![viewBookInfo_3.png](https://github.com/Jharilela/Bookmark/blob/master/bookmark-docs/pictures/viewBookInfo_3.png)

If the book has been rented or sold to someone, it appears as follows 

![viewBookInfo_2.png](https://github.com/Jharilela/Bookmark/blob/master/bookmark-docs/pictures/viewBookInfo_2.png)

The modal can be called using the `$ionicModal` method

    $ionicModal.fromTemplateUrl('directives/viewBookInfo.html', {
        scope: $scope,
        animation: 'slide-in-up'
    }).then(function(modal) {
        $scope.modal = modal;
        $scope.modal.show();
    });

When the book is located on the user's shelf, the user can change the status of the book using the toggle buttons and the input box. The currency within the title box must also be loaded within the controller summoning the modal. Apart from that, a `$scope.changeBookStatus(book, 'rentBook')` needs to be declared within the controller to handle the change of bookStatus when the user presses the toggle buttons or changes the book rent/sell price

# viewBorrowFrom
When the user presses the borrow button in the bookDetails page, the viewBorrowFrom popover is loaded on the screen right below the borrow button similar to that of a popup. The purpose of this popover is to display other users who have the book and willing to rent the book along with the rent price.

![viewBorrowFrom_1](https://github.com/Jharilela/Bookmark/blob/master/bookmark-docs/pictures/viewBorrowFrom_1.jpg)

![viewBorrowFrom_2](https://github.com/Jharilela/Bookmark/blob/master/bookmark-docs/pictures/viewBorrowFrom_2.png)

It can be called using the `$ionicPopover` method using the code below

    $ionicPopover.fromTemplateUrl('directives/viewBorrowFrom.html', {
        scope: $scope
    }).then(function(popover) {
        $scope.popover = popover;
        $scope.openPopover($event);
    });

    $scope.openPopover = function($event) {
        $scope.popover.show($event);
    };
    $scope.closePopover = function() {
        $scope.popover.hide();
    };
    $scope.$on('$destroy', function() {
        $scope.popover.remove();
    });

In addition to the standard implementation of `$ionicPopover`, some methods from the `$scope` controller like `openPopover`, `closePopover` and `destroy` are required to open and close the popover asynchronously during the run time of the application

No functions other than the `$scope` functions mentioned above are invoked from within the viewBorrowFrom directive; instead, we implement ui-routers to different pages from the directive directly. When an image is pressed, the router redirects to the 'userProfile' page along with a user parameter

# viewBuyFrom
When the user presses the borrow button in the bookDetails page, the viewBuyFrom popover is loaded on the screen right below the borrow button similar to that of a pop-up. The purpose of this popover is to display other users who have the book and willing to sell the book along with the selling price. The only difference between the viewBuyFrom and viewBorrowFrom directive is that the former displays the selling price and the later displays the renting price. If the user does not specify the selling price, no price will be displayed

![viewBuyFrom_1](https://github.com/Jharilela/Bookmark/blob/master/bookmark-docs/pictures/viewBuyFrom_1.jpg)

![viewBuyFrom_2](https://github.com/Jharilela/Bookmark/blob/master/bookmark-docs/pictures/viewBuyFrom_2.png)

It can be called using the `$ionicPopover` method using the code below

    $ionicPopover.fromTemplateUrl('directives/viewBuyFrom.html', {
        scope: $scope
    }).then(function(popover) {
        $scope.popover = popover;
        $scope.openPopover($event);
    });

    $scope.openPopover = function($event) {
        $scope.popover.show($event);
    };
    $scope.closePopover = function() {
        $scope.popover.hide();
    };
    $scope.$on('$destroy', function() {
        $scope.popover.remove();
    });

In addition to the standard implementation of `$ionicPopover`, some methods from the `$scope` controller like `openPopover`, `closePopover` and `destroy` are required to open and close the popover asynchronously during the run time of the application

No functions other than the `$scope` functions mentioned above are invoked from within the viewBuyFrom directive; instead, we implement ui-routers to different pages from the directive directly. When an image is pressed, the router redirects to the 'userProfile' page along with a user parameter

# viewMapPop  
Each user has a map of their proximate location in their profile page. This map can be viewed by pressing the map-marker icon on the userProfile page. The purpose of this page is to show the distance between the user and the book owner and also the locality or vicinity where the bookOwner lives. This provides the user with adequate information including how far he has to travel and the risks in traveling to the location. 

![viewMapPop_1.jpg](https://github.com/Jharilela/Bookmark/blob/master/bookmark-docs/pictures/viewMapPop_1.jpg)

![viewMapPop_2.png](https://github.com/Jharilela/Bookmark/blob/master/bookmark-docs/pictures/viewMapPop_2.png)

In order to access this directive, we need to implement the `$ionicPopover` method

    $ionicPopover.fromTemplateUrl('directives/viewMapPop.html', {
        scope: $scope
    }).then(function(popover) {
        $scope.popover = popover;
        $scope.openPopover($event);
        vm.popoverMap = NgMap.initMap("popoverMap");
    });

The map to be used in the directive is first declared in the inside of the controller. the map variable is called popoverMap and declared as a property of `vm` which means simply means it is a property of the controller; it can also be written as `this.popoverMap`. NgMap is an angular plugin that loads google map asynchronously; to use NgMap, we must first initialize it using the `NgMap.initMap("variable_name")`. The documentation of NgMap can be found [here](https://ngmap.github.io/)

Within the `ion-content`, the ng-map HTML element loads the google maps and the shape element defines the circle indicating the proximity of the location 

    <ng-map id="popoverMap" lazy-init="true" center="{{userProfile.mapCenter}}" zoom="13"    street-view-control="false" map-type-control="false" scrollwheel="true" >
        <shape name="circle" stroke-color='#0044FF' stroke-weight="1" fill-opacity=" 0.2" center="{{userProfile.mapCenter}}" radius="2000" draggable="false">
        </shape>
    </ng-map>

The ng-map tag has several attributes:
* `id` - identifier of the map loaded. The configuration or the center position of the map can be changed through the identifier
* `lazy-init` - asynchronously load the map after the page has been loaded
* `center` - specifies the center of the map, it receives an object containing lat and lng key/value pairs
* `zoom` - zoom level of the image. Default size for Hk is 13
* `street-view-control` -accepts boolean variable to show the street view control button in the google maps
* `map-type-control` - accepts boolean variable to show the satellite button in the google maps
* `scrollwheel` - accepts a boolean variable to show the + and - zoom control button in the google maps

The shape tag has several attributes
* `name` - defines the type of shape: circle, rectangle, polygon
* `stroke-color` - the color of the border
* `stroke-weight` - the width of the border
* `fill-opacity` - opacity of the body of the shape
* `center` - the center of the shape on the map. Receives an object with lat and lng parameters
* `radius` - radius of the shape if it is a circle
* `draggable` - user is able to relocate the shape 

# viewProfilePicture
While chatting with another user, we can view their profile picture by pressing their avatar or face icon. Their directive is simple and loads an image from the link specified inside `$scope.viewPicture`. The purpose of this directive is to enable users to view each other's picture. The picture appears to be within a circle with a black background; when the black background is tapped, the directive closes.

![viewProfilePicture_1.png](https://github.com/Jharilela/Bookmark/blob/master/bookmark-docs/pictures/viewProfilePicture_1.PNG)

![viewProfilePicture_2.png](https://github.com/Jharilela/Bookmark/blob/master/bookmark-docs/pictures/viewProfilePicture_2.PNG)

When using the directive, we must define a `$scope.closeModal` function within the calling controller which removes the modal.  

    var templateUrl = 'directives/viewProfilePicture.html'
    $ionicModal.fromTemplateUrl(templateUrl, {
        scope: $scope,
        animation: 'slide-in-up'
    }).then(function(modal) {
        $scope.modal = modal;
        $scope.modal.show();
    });
    // Close the modal
    $scope.closeModal = function() {
        $scope.modal.hide();
        $scope.modal.remove()
    }